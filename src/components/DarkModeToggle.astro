---
// DarkModeToggle.astro - A component for toggling between light and dark themes
---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle dark mode">
    <svg
        class="sun-icon"
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="currentColor"
    >
        <circle cx="10" cy="10" r="4"></circle>
        <path
            d="M10 0v2M10 18v2M4.22 4.22l1.42 1.42M14.36 14.36l1.42 1.42M0 10h2M18 10h2M4.22 15.78l1.42-1.42M14.36 5.64l1.42-1.42"
        ></path>
    </svg>
    <svg
        class="moon-icon"
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="currentColor"
    >
        <path
            d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
        ></path>
    </svg>
</button>

<script>
    // Theme management functionality
    class ThemeManager {
        theme: string;

        constructor() {
            this.theme = this.getTheme();
            this.init();
        }

        // Get current theme from localStorage or system preference
        getTheme = () => {
            if (typeof localStorage !== "undefined") {
                const stored = localStorage.getItem("theme");
                if (stored) return stored;
            }

            // Check system preference
            if (
                window.matchMedia &&
                window.matchMedia("(prefers-color-scheme: dark)").matches
            ) {
                return "dark";
            }

            return "light";
        };

        // Initialize theme on page load
        init = () => {
            this.applyTheme(this.theme);
            this.updateToggleIcon();

            // Listen for system theme changes
            if (window.matchMedia) {
                window
                    .matchMedia("(prefers-color-scheme: dark)")
                    .addEventListener("change", (e) => {
                        if (!localStorage.getItem("theme")) {
                            this.theme = e.matches ? "dark" : "light";
                            this.applyTheme(this.theme);
                            this.updateToggleIcon();
                        }
                    });
            }
        };

        // Apply theme to document
        applyTheme = (theme) => {
            document.documentElement.setAttribute("data-theme", theme);

            if (typeof localStorage !== "undefined") {
                localStorage.setItem("theme", theme);
            }
        };

        // Toggle between themes
        toggle = () => {
            this.theme = this.theme === "light" ? "dark" : "light";
            this.applyTheme(this.theme);
            this.updateToggleIcon();
        };

        // Update toggle button icon
        updateToggleIcon = () => {
            const button = document.getElementById("theme-toggle");
            if (button) {
                const sunIcon = button.querySelector(".sun-icon");
                const moonIcon = button.querySelector(".moon-icon");

                if (this.theme === "dark") {
                    sunIcon?.setAttribute("style", "display: block;");
                    moonIcon?.setAttribute("style", "display: none;");
                } else {
                    sunIcon?.setAttribute("style", "display: none;");
                    moonIcon?.setAttribute("style", "display: block;");
                }
            }
        };
    }

    // Initialize theme manager
    const themeManager = new ThemeManager();

    // Add click event listener to toggle button
    document.addEventListener("DOMContentLoaded", () => {
        const toggleButton = document.getElementById("theme-toggle");
        if (toggleButton) {
            toggleButton.addEventListener("click", () => {
                themeManager.toggle();
            });
        }
    });

    // Handle page navigation (for Astro's client-side routing)
    document.addEventListener("astro:page-load", () => {
        themeManager.updateToggleIcon();
    });
</script>

<style>
    .theme-toggle {
        background: none;
        border: 2px solid var(--text-primary);
        border-radius: 50%;
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: var(--text-primary);
        transition: all 0.2s ease;
        position: relative;
    }

    .theme-toggle:hover {
        background-color: var(--text-primary);
        color: var(--background);
        transform: scale(1.05);
    }

    .theme-toggle:focus {
        outline: 2px solid var(--accent);
        outline-offset: 2px;
    }

    .sun-icon,
    .moon-icon {
        position: absolute;
        transition: opacity 0.2s ease;
    }

    .sun-icon {
        display: none;
    }

    .moon-icon {
        display: block;
    }

    /* Icon visibility will be controlled by JavaScript */
</style>
